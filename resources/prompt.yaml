# 这个文件是用来存放提示词的

# 任务分解提示词
task_decompose: |
  这是一个基于无人机并多平台协同的任务，请帮助我将用户任务：{user_task} 分解为多个子任务，便于后续无人机的控制。
  要求：
  1.你需要先在互联网搜集关于该任务的相关信息，然后理解任务的目标和要求。
  2.每个子任务的目标和要求必须清晰明确，避免模糊不清的描述。
  3.子任务应尽可能独立，减少任务之间的依赖关系。
  4.子任务的规模应适中，既不能过大也不能过小。
  5.每个子任务需要包含以下属性：
  - `task_id`：子任务的唯一标识符（整数）。
  - `name`：子任务的名称（字符串），需要具体描述子任务的内容。
  - `priority`：子任务的优先级（整数，数值越小优先级越高）。
  - `dep_id`：子任务的依赖任务ID（列表，包含所有依赖任务的ID，如果没有依赖则为None）。
  - `is_interrupt`：子任务是否可以被中断（布尔值，True表示可以中断，False表示不可以中断）。
  - `state`：子任务的初始状态（使用 `TaskState.WAITING`）。
  - `device`：子任务使用的无人机（暂时不使用，可以忽略）。
  - `instructions`：子任务的指令列表（暂时不使用，可以忽略）。
  - `requirements`：子任务的额外要求，用于匹配无人机和模型（字典，键值对形式）。
  - `models`：子任务使用的模型（暂时不使用，可以忽略）。


  输出：请将用户任务分解为多个子任务，并以以下json格式返回结果，不要返回其他内容，严格保证Json格式的返回：

  [
      {{
          "task_id": [子任务1的ID],
          "name": "[子任务1的名称]",
          "priority": [子任务1的优先级],
          "dep_id": [子任务1的依赖任务ID],
          "is_interrupt": [子任务1是否可以被中断],
          "state": "WAITING",
          "requirements": [子任务1的额外要求]
      }},
      {{
          "task_id": [子任务2的ID],
          "name": "[子任务2的名称]",
          "priority": [子任务2的优先级],
          "dep_id": [子任务2的依赖任务ID],
          "is_interrupt": [子任务2是否可以被中断],
          "state": "WAITING",
          "requirements": [子任务2的额外要求]
      }},
      ...
  ]

# 生成步骤提示词
generate_instruction: |
  你需要根据任务信息，生成完成该子任务无人机需要执行的步骤列表。下面是子任务的信息：
  子任务信息：
  - 子任务ID: {sub_task_id}
  - 名称: {sub_task_name}
  - 优先级: {sub_task_priority}
  - 依赖任务ID: {sub_task_dep_id}
  - 是否可以中断: {sub_task_is_interrupt}
  - 额外要求: {sub_task_requirements}
  要求：
  1.生成的步骤必须在下列可选的步骤指令中选择，包括：
  | 指令名称       | 描述                                     |
  |----------------|------------------------------------------|
  | takeoff        | 无人机垂直起飞                           |
  | land           | 无人机从当前位置降落                     |
  | hover          | 无人机在当前位置悬停                     |
  | move_forward   | 无人机向前飞行                           |
  | move_backward  | 无人机向后飞行                           |
  | move_left      | 无人机向左飞行                           |
  | move_right     | 无人机向右飞行                           |
  | ascend         | 无人机上升                               |
  | descend        | 无人机下降                               |
  | search         | 无人机随机飞行
  | yaw            | 无人机围绕垂直轴旋转                     |
  | fly_to         | 无人机飞行到指定坐标点                   |
  | return_to_home | 无人机返回起飞点降落                     |
  | emergency_stop | 无人机紧急停止所有动作，并保持当前位置   |
  | interrupt      | 中断当前任务                             |
  | 自定义指令     | 根据具体任务需求自定义其他指令           |
  2.步骤是在无人机上执行的动作，你需要了解关于无人机的操控知识。
  3.尽量避免使用自定义指令，除非没有合适的指令可以选择。
  4.步骤的生成需要考虑无人机的实际情况，例如无人机的速度、高度、载荷等。
  5.步骤的生成需要考虑子任务的额外要求，例如飞行高度、飞行时间等。
  6.如果你能够确定步骤的大致参数，可以直接填写在步骤描述中，或者描述一个具体情况，例如飞行到楼顶的高度。
  7.你需要明确步骤的执行完成的标志，例如飞行到楼顶的高度，搜寻到红色小汽车，或者是具体的参数。

  输出：请根据子任务的描述和额外要求，选择合适的指令生成步骤列表。注意只需要输出json格式的步骤的列表，严格保证json格式的输出，不要解释任何内容。
  示例：[{{"name":"takeoff","description":"无人机从地面垂直起飞到预设高度"}},{{"name":"ascend","description":"无人机垂直升高到居民楼的高度"}}]

 

# 步骤生成指令提示词
stepTranslate: |
  你需要根据输入的步骤列表{step}，将每个步骤转化为对应的无人机的飞行基本指令。
  输入步骤列表示例：
  [
      {{
          "name": "takeoff",
          "description": "无人机从地面垂直起飞到预设高度5m"
      }},
  ]
  要求：
  1.输入为一个步骤列表，每个步骤包含步骤名称和描述信息,一般都是只有一个步骤。
  2.无人机的基本指令必须从下列指令中选择，基本指令有：
  - command_takeoff: 无人机起飞
    - 参数: 
    - 示例: Instruction('command_takeoff', {{}})
  - command_pos: 飞行到位置（x, y, z）
    - 参数: x, y, z
    - 示例: Instruction('command_pos', {{'x': 0, 'y': 0, 'z': 5}})
  - command_vel: 以某个速度（x, y, z）飞行时间t
    - 参数: x, y, z, t
    - 示例: Instruction('command_vel', {{'x': 0, 'y': 0, 'z': 0.5, 't': 5}})
  - command_hover: 悬停在当前位置，持续时间t
    - 参数: duration
    - 示例: Instruction('command_hover', {{'duration': 5}})
  - command_twist: 围绕z轴以速度rate旋转时间duration
    - 参数: degree, rate
    - 示例: Instruction('command_twist', {{'yaw_rate': 90, 'duration': 10}})
  - command_land: 降落到当前位置
    - 参数: 无
    - 示例: Instruction('command_land', {{}})
  - command_search: 在半径为r的圆形区域内搜索，持续时间t
    - 参数: r, t
    - 示例: Instruction('command_search', {{'r': 10, 't': 30}})
  - command_interrupt: 中断当前任务
    - 参数: 无
    - 示例: Instruction('command_interrupt', {{}})
  3.基本指令需要参数，你需要根据步骤描述中给出的参数，填写到指令中。如果没有参数，你需要根据实际情况给出一个较小的参数，不能为空。
  输出：你只返回json格式的指令，不要返回其他内容，即使没有合适的对应指令，也不要解释。
  格式为：[
    {{
      "command": "",
      "params": {{}}
    }},
  ]
  例如：对于步骤[
      {{
          "name": "takeoff",
          "description": "无人机从地面垂直起飞到预设高度5m"
      }},
  ]，结果示例为：
  [{{"command":"command_takeoff","params":{{}}}},{{"command":"command_pos","params":{{'x': 0, 'y': 0, 'z': 5}}}}] ，


# 步骤执行效果检测提示词
stepCheck: |
  当前无人机正在执行步骤{step}，你需要根据步骤的动作和要求的描述，和无人机监控器中的传感器数据{data}，传感器数据中有无人机的位置信息、状态信息、速度信息，目标检测信息，和图像信息{image_info}，一步步地思考，检查步骤是否得到满足。

  要求：
  1.如果步骤没有得到满足，输出中的Instruction中为基本指令，你需要根据实际的执行情况，发布新的指令以达到步骤目标。基本指令有：
  - command_pos: 飞行到位置（x, y, z）
    - 参数: x, y, z
    - 示例: Instruction('command_pos', {{'x': 0, 'y': 0, 'z': 5}})
  - command_vel: 以某个速度（x, y, z）飞行时间t
    - 参数: x, y, z, t
    - 示例: Instruction('command_vel', {{'x': 0, 'y': 0, 'z': 0.5, 't': 5}})
  - command_hover: 悬停在当前位置，持续时间t
    - 参数: duration
    - 示例: Instruction('command_hover', {{'duration': 5}})
  - command_twist: 围绕z轴以速度rate旋转时间duration
    - 参数: degree, rate
    - 示例: Instruction('command_twist', {{'yaw_rate': 90, 'duration': 10}})
  - command_land: 降落到当前位置
    - 参数: 无
    - 示例: Instruction('command_land', {{}})
  - command_search: 在半径为r的圆形区域内搜索，持续时间t
    - 参数: r, t
    - 示例: Instruction('command_search', {{'r': 10, 't': 30}})
  - command_interrupt: 中断当前任务
    - 参数: 无
    - 示例: Instruction('command_interrupt', {{}})
  2.你的返回结果中的instruction必须从上面所给的基本指令中进行选择，且只能够发布一条指令.
  3.你需要具体给出指令的参数，不能留空。
  4.当步骤无法得到满足时，你可以根据实际情况调整指令的参数。例如扩大搜索范围，增加飞行高度等。
  5.步骤如果得到满足，instruction为空。
  6.不需要你十分准确的判断步骤是否完成，当你认为80%的概率步骤完成时就可以返回真
  7.步骤的检查效果的解释填充到reason属性中

  输出：如果步骤得到满足，返回 [{{"result":true,"instruction":none,"reason":""}}]；
  如果步骤没有得到满足，返回 [{{"result":false,"instruction":[    {{
      "command": "",
      "params": {{}}
    }},],,"reason":""}}]。
  另外，必须严格以上面的返回形式输出，不要返回任何其他内容,不需要任何解释。


# 无人机分配提示词
DroneAssign: |
  根据子任务信息{subtasks}，子任务是json格式，选择合适的无人机分配给每个子任务。每个子任务包含以下属性：
  子任务属性：
  | 名称         | 描述         | 范围      |
  | ------------ | ------------ | --------- |
  | id           | 任务ID       |           |
  | name         | 任务名称     |           |
  | priority     | 优先级       | 0-10      |
  | depId        | 依赖任务ID   | 任务ID    |
  | isInterrupt  | 是否抢占     | 0/1       |
  | state        | 任务状态     | 1,2,3,4,5 |
  | device       | 使用的无人机 |           |
  | instructions | 指令列表     | 列表      |
  | requirements | 要求字典     | 字典      |
  | models       | 模型         | 列表      |
  要求：
  1.你需要从以下无人机型号中选择合适的无人机，并为每个任务分配一台无人机。
  可选无人机型号
  | 无人机类型           | 子型号                | 用途                                                         | 自重   | 翼展  | 飞行时间 | 载荷  | 最大速度 |
  | -------------------- | --------------------- | ------------------------------------------------------------ | ------ | ----- | -------- | ----- | -------- |
  | 四旋翼无人机         | iris_2d_lidar         | 携带2d雷达，用于2d建图，便于后续无人机无人车的路径规划与自主导航。 | 1282g  | 0.55m | 17min    | 400g  | 16m/s    |
  |                      | iris_3d_gpu_lidar     | 携带3d雷达，用于3d建图，便于后续无人机无人车的路径规划与自主导航。 | 1282g  | 0.55m | 17min    | 400g  | 16m/s    |
  |                      | iris_downward_camera  | 携带下侧摄像头，用于搜索、物体定位、构建地图。               | 1282g  | 0.55m | 17min    | 400g  | 16m/s    |
  |                      | iris_fpv_cam          | 携带第一视角摄像头，该无人机速度更快，体积更小，能够在复杂的地形中穿梭，可以使用第一视角摄像头在较为复杂的环境中侦查，目标识别。 | 1282g  | 0.55m | 17min    | 400g  | 16m/s    |
  |                      | iris_realsense_camera | 携带深度摄像头，可以在低光环境下精确地捕捉物体的轮廓、深度和形状等信息。常用于物体的识别和跟踪、自动导航、三维建模。 | 1282g  | 0.55m | 17min    | 400g  | 16m/s    |
  | 六旋翼无人机         | typhoon_h480          | 携带云台相机，能够提供更稳定和清晰的图像，可以独立控制相机的运动，用于拍摄、测绘、目标识别。 | 1695g  | 0.70m | 25min    | 1150g | 18m/s    |
  | 固定翼无人机         | plane                 | 适用于航测、巡航和长航时飞行，适用于大范围巡航和测绘任务.    | 5500g  | 3m    | 300min   | 5000g | 35m/s    |
  | 垂直起降固定翼无人机 | standard_vtol         | 结合了固定翼的长航时和多旋翼的垂直起降特性，适用于复杂环境下的长航时飞行测试 | 19000g | 3.2m  | 360min   | 6500g | 28m/s    |
  2.如果多个任务需要同一种无人机，不是同一台，则通过编号区分（例如 typhoon_h480_0、typhoon_h480_1 等）。
  3.分配逻辑
  任务优先级：优先分配高优先级的任务（优先级数值越大，优先级越高）。
  任务依赖性：如果任务有依赖任务（depId），则依赖任务必须先分配。
  任务抢占性：如果任务为抢占性任务（isInterrupt=1），则优先分配。
  无人机适配性：根据任务需求（如载荷、飞行时间、用途等），选择最适合的无人机型号。
  多任务分配：如果多个任务可以由同一台无人机完成，无人机编号相同。
  输出：
  为每个子任务分配一台无人机，并将无人机型号添加到 device 属性中。然后按照原子任务列表的json格式输出，只输出json，不需要解释任何内容。

# 启动文件提示词
LaunchFile: |
  根据无人机列表{drones}和地图文件名称{world_file}，生成多无人机仿真环境的 launch 文件。
  无人机列表只包含无人机的名称。
  1. 基本格式说明
  以下是一个多无人机仿真环境的 launch 文件模板，支持动态生成多个无人机实例。你可以根据需要调整无人机数量、初始位置、端口号等参数。
  
  2. 模板内容
  
  ```xml
  <?xml version="1.0"?>
  <launch>
      <!-- MAVROS posix SITL environment launch script -->
      <!-- launches Gazebo environment and multiple MAVROS, PX4 SITL instances, and spawns vehicles -->
  
      <!-- 地图文件地址 -->
      <arg name="world" default="$(find mavlink_sitl_gazebo)/worlds/{{world_file}}"/>
  
      <!-- Gazebo 配置 -->
      <arg name="gui" default="true"/>
      <arg name="debug" default="false"/>
      <arg name="verbose" default="true"/>
      <arg name="paused" default="false"/>
  
      <!-- 启动 Gazebo 环境 -->
      <include file="$(find gazebo_ros)/launch/empty_world.launch">
          <arg name="gui" value="$(arg gui)"/>
          <arg name="world_name" value="$(arg world)"/>
          <arg name="debug" value="$(arg debug)"/>
          <arg name="verbose" value="$(arg verbose)"/>
          <arg name="paused" value="$(arg paused)"/>
      </include>
  
      <!-- 无人机实例生成 -->
      <!-- 无人机数量 -->
      {{drone_groups}}
  </launch>
  ```
  
  3. 动态生成无人机实例
  根据无人机数量，动态生成 `<group>` 标签内容。以下是单个无人机实例的模板，可以重复并修改参数以生成多个实例。
  
  ```xml
  <!-- 无人机 {{drone_id}} -->
  <group ns="{{drone_name}}">
      <!-- MAVROS 和无人机配置 -->
      <arg name="ID" value="{{drone_id}}"/>
      <arg name="ID_in_group" value="{{group_id}}"/>
      <arg name="fcu_url" default="udp://:2454{{udp_port}}@localhost:3458{{udp_port}}"/>
  
      <!-- PX4 SITL 和无人机生成 -->
      <include file="$(find px4)/launch/single_vehicle_spawn_xtd.launch">
          <arg name="x" value="0"/>
          <arg name="y" value="{{y_position}}"/>
          <arg name="z" value="0"/>
          <arg name="R" value="0"/>
          <arg name="P" value="0"/>
          <arg name="Y" value="0"/>
          <arg name="vehicle" value="{{vehicle_model}}"/>
          <arg name="sdf" value="{{sdf_file}}"/>
          <arg name="mavlink_udp_port" value="{{udp_port}}"/>
          <arg name="mavlink_tcp_port" value="{{tcp_port}}"/>
          <arg name="ID" value="$(arg ID)"/>
          <arg name="ID_in_group" value="$(arg ID_in_group)"/>
      </include>
  
      <!-- MAVROS -->
      <include file="$(find mavros)/launch/px4.launch">
          <arg name="fcu_url" value="$(arg fcu_url)"/>
          <arg name="gcs_url" value=""/>
          <arg name="tgt_system" value="$(eval 1 + arg('ID'))"/>
          <arg name="tgt_component" value="1"/>
      </include>
  </group>
  ```
  
  4. 参数说明
  - `{{world_file}}`：地图文件地址，例如 `outdoor1_light.world`。
  - `{{drone_groups}}`：动态生成的无人机实例内容。
  - `{{drone_id}}`：无人机编号（从 0 开始）。
  - `{{group_id}}`：组内编号（与 `{{drone_id}}` 一致）。
  - `{{udp_port}}`：UDP 端口号，从 0 开始递增（例如 24540、24541...）。
  - `{{tcp_port}}`：TCP 端口号，从 0 开始递增（例如 4560、4561...）。
  - `{{y_position}}`：无人机的初始 Y 坐标，从 0 开始递增。
  - `{{vehicle_model}}`：无人机的基本型号，例如 `typhoon_h480`。
  - `{{sdf_file}}`：无人机的 SDF 文件名称，例如 `typhoon_h480`。
  - `{{drone_name}}`：无人机的命名空间，例如 `typhoon_h480_0`。
  
  5. 生成示例
  假设需要生成 3 个无人机实例，地图文件为 `outdoor1_light.world`，无人机型号为 `typhoon_h480`，SDF 文件为 `typhoon_h480`，则动态生成的 `{{drone_groups}}` 内容如下：
  
  ```xml
  <!-- 无人机 0 -->
  <group ns="typhoon_h480_0">
      <arg name="ID" value="0"/>
      <arg name="ID_in_group" value="0"/>
      <arg name="fcu_url" default="udp://:24540@localhost:34580"/>
      <include file="$(find px4)/launch/single_vehicle_spawn_xtd.launch">
          <arg name="x" value="0"/>
          <arg name="y" value="0"/>
          <arg name="z" value="0"/>
          <arg name="R" value="0"/>
          <arg name="P" value="0"/>
          <arg name="Y" value="0"/>
          <arg name="vehicle" value="typhoon_h480"/>
          <arg name="sdf" value="typhoon_h480"/>
          <arg name="mavlink_udp_port" value="18570"/>
          <arg name="mavlink_tcp_port" value="4560"/>
          <arg name="ID" value="$(arg ID)"/>
          <arg name="ID_in_group" value="$(arg ID_in_group)"/>
      </include>
      <include file="$(find mavros)/launch/px4.launch">
          <arg name="fcu_url" value="$(arg fcu_url)"/>
          <arg name="gcs_url" value=""/>
          <arg name="tgt_system" value="$(eval 1 + arg('ID'))"/>
          <arg name="tgt_component" value="1"/>
      </include>
  </group>
  
  <!-- 无人机 1 -->
  <group ns="typhoon_h480_1">
      <arg name="ID" value="1"/>
      <arg name="ID_in_group" value="1"/>
      <arg name="fcu_url" default="udp://:24541@localhost:34581"/>
      <include file="$(find px4)/launch/single_vehicle_spawn_xtd.launch">
          <arg name="x" value="0"/>
          <arg name="y" value="1"/>
          <arg name="z" value="0"/>
          <arg name="R" value="0"/>
          <arg name="P" value="0"/>
          <arg name="Y" value="0"/>
          <arg name="vehicle" value="typhoon_h480"/>
          <arg name="sdf" value="typhoon_h480"/>
          <arg name="mavlink_udp_port" value="18571"/>
          <arg name="mavlink_tcp_port" value="4561"/>
          <arg name="ID" value="$(arg ID)"/>
          <arg name="ID_in_group" value="$(arg ID_in_group)"/>
      </include>
      <include file="$(find mavros)/launch/px4.launch">
          <arg name="fcu_url" value="$(arg fcu_url)"/>
          <arg name="gcs_url" value=""/>
          <arg name="tgt_system" value="$(eval 1 + arg('ID'))"/>
          <arg name="tgt_component" value="1"/>
      </include>
  </group>
  
  <!-- 无人机 2 -->
  <group ns="typhoon_h480_2">
      <arg name="ID" value="2"/>
      <arg name="ID_in_group" value="2"/>
      <arg name="fcu_url" default="udp://:24542@localhost:34582"/>
      <include file="$(find px4)/launch/single_vehicle_spawn_xtd.launch">
          <arg name="x" value="0"/>
          <arg name="y" value="2"/>
          <arg name="z" value="0"/>
          <arg name="R" value="0"/>
          <arg name="P" value="0"/>
          <arg name="Y" value="0"/>
          <arg name="vehicle" value="typhoon_h480"/>
          <arg name="sdf" value="typhoon_h480"/>
          <arg name="mavlink_udp_port" value="18572"/>
          <arg name="mavlink_tcp_port" value="4562"/>
          <arg name="ID" value="$(arg ID)"/>
          <arg name="ID_in_group" value="$(arg ID_in_group)"/>
      </include>
      <include file="$(find mavros)/launch/px4.launch">
          <arg name="fcu_url" value="$(arg fcu_url)"/>
          <arg name="gcs_url" value=""/>
          <arg name="tgt_system" value="$(eval 1 + arg('ID'))"/>
          <arg name="tgt_component" value="1"/>
      </include>
  </group>
  ```
  
  6. 生成方法
  你可以通过循环生成 `{{drone_groups}}` 的 XML 内容，并替换到主模板中。最后只返回生成的 launch 文件内容，不需要输出其他任何内容。